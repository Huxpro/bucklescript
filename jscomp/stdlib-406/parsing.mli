(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** The run-time library for parsers generated by [ocamlyacc]. *)

val symbol_start : unit -> int (* [@@dead "symbol_start"] *)
(** [symbol_start] and {!Parsing.symbol_end} are to be called in the
   action part of a grammar rule only. They return the offset of the
   string that matches the left-hand side of the rule: [symbol_start()]
   returns the offset of the first character; [symbol_end()] returns the
   offset after the last character. The first character in a file is at
   offset 0. *)

val symbol_end : unit -> int (* [@@dead "symbol_end"] *)
(** See {!Parsing.symbol_start}. *)

val rhs_start : int -> int (* [@@dead "rhs_start"] *)
(** Same as {!Parsing.symbol_start} and {!Parsing.symbol_end}, but
   return the offset of the string matching the [n]th item on the
   right-hand side of the rule, where [n] is the integer parameter
   to [rhs_start] and [rhs_end]. [n] is 1 for the leftmost item. *)

val rhs_end : int -> int (* [@@dead "rhs_end"] *)
(** See {!Parsing.rhs_start}. *)

val symbol_start_pos : unit -> Lexing.position (* [@@dead "symbol_start_pos"] *)
(** Same as [symbol_start], but return a [position] instead of an offset. *)

val symbol_end_pos : unit -> Lexing.position (* [@@dead "symbol_end_pos"] *)
(** Same as [symbol_end], but return a [position] instead of an offset. *)

val rhs_start_pos : int -> Lexing.position (* [@@dead "rhs_start_pos"] *)
(** Same as [rhs_start], but return a [position] instead of an offset. *)

val rhs_end_pos : int -> Lexing.position (* [@@dead "rhs_end_pos"] *)
(** Same as [rhs_end], but return a [position] instead of an offset. *)

val clear_parser : unit -> unit (* [@@dead "clear_parser"] *)
(** Empty the parser stack. Call it just after a parsing function
   has returned, to remove all pointers from the parser stack
   to structures that were built by semantic actions during parsing.
   This is optional, but lowers the memory requirements of the
   programs. *)

exception Parse_error
(** Raised when a parser encounters a syntax error.
   Can also be raised from the action part of a grammar rule,
   to initiate error recovery. *)

val set_trace: bool -> bool (* [@@dead "set_trace"] *)
(** Control debugging support for [ocamlyacc]-generated parsers.
    After [Parsing.set_trace true], the pushdown automaton that
    executes the parsers prints a trace of its actions (reading a token,
    shifting a state, reducing by a rule) on standard output.
    [Parsing.set_trace false] turns this debugging trace off.
    The boolean returned is the previous state of the trace flag.
    @since 3.11.0
*)

(**/**)

(** {1  } *)

(** The following definitions are used by the generated parsers only.
   They are not intended to be used directly by user programs. *)

type parser_env

type parse_tables =
  { actions : (parser_env -> Obj.t) array; (* [@@dead "parse_tables.actions"] *)
    transl_const : int array; (* [@@dead "parse_tables.transl_const"] *)
    transl_block : int array; (* [@@dead "parse_tables.transl_block"] *)
    lhs : string; (* [@@dead "parse_tables.lhs"] *)
    len : string; (* [@@dead "parse_tables.len"] *)
    defred : string; (* [@@dead "parse_tables.defred"] *)
    dgoto : string; (* [@@dead "parse_tables.dgoto"] *)
    sindex : string; (* [@@dead "parse_tables.sindex"] *)
    rindex : string; (* [@@dead "parse_tables.rindex"] *)
    gindex : string; (* [@@dead "parse_tables.gindex"] *)
    tablesize : int; (* [@@dead "parse_tables.tablesize"] *)
    table : string; (* [@@dead "parse_tables.table"] *)
    check : string; (* [@@dead "parse_tables.check"] *)
    error_function : string -> unit; (* [@@dead "parse_tables.error_function"] *)
    names_const : string; (* [@@dead "parse_tables.names_const"] *)
    names_block : string } (* [@@dead "parse_tables.names_block"] *)

exception YYexit of Obj.t

val yyparse :
  parse_tables -> int -> (Lexing.lexbuf -> 'a) -> Lexing.lexbuf -> 'b
val peek_val : parser_env -> int -> 'a
val is_current_lookahead : 'a -> bool (* [@@dead "is_current_lookahead"] *)
val parse_error : string -> unit